"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getContract = void 0;
const ethers_1 = require("ethers");
const deployments_json_1 = __importDefault(require("../../deployments.json"));
const contracts_1 = require("../contracts");
const Deployments = deployments_json_1.default;
// Custom function to format lookup by env and double check that the contract retrieved is not null.
const getContract = (name, chain, useStaging, wallet) => {
    const deployments = Deployments[chain];
    if (!deployments) {
        throw new Error(`No deployments found for chain ${chain}!`);
    }
    const contracts = deployments[0]["contracts"];
    if (!contracts) {
        throw new Error(`No contracts found under deployments for chain ${chain}!`);
    }
    const envSuffix = useStaging ? "Staging" : "";
    const isConnext = name.includes("Connext");
    const key = isConnext ? `Connext${envSuffix}_DiamondProxy` : name + envSuffix;
    const result = contracts[key];
    if (!result) {
        throw new Error(`Contract ${key} was not found in deployments.json!`);
    }
    else if (!result.address || !result.abi) {
        throw new Error(`Contract ${key} was missing address or ABI in deployments.json!`);
    }
    // Use the ABI of the implementation contract, if applicable.
    let abi = result.abi;
    const implementation = name.includes("UpgradeBeaconProxy") ? name.replace("UpgradeBeaconProxy", "") : undefined;
    if (implementation) {
        const implementation_with_env = useStaging ? implementation?.concat("Staging") : implementation;
        const found = contracts[implementation_with_env];
        if (found && found.abi) {
            abi = found.abi;
        }
    }
    return {
        proxy: key,
        name: isConnext ? "Connext" : implementation ?? name,
        address: result.address,
        abi,
        contract: new ethers_1.Contract(result.address, 
        // Special case if this is the Connext diamond.
        isConnext ? contracts_1.ConnextInterface : abi, wallet),
    };
};
exports.getContract = getContract;
//# sourceMappingURL=helpers.js.map